    //
    // __Name__
    //

    /**
     * Reads a <code>__name__</code> value from the data set <var>objectPath</var>. This method doesn't
     * check the data space but simply reads the first value.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @return The value read from the data set.
     */
    public __name__ read__Name__(final String objectPath)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__Wrappername__> readCallable = new ICallableWithCleanUp<__Wrappername__>()
            {
                public __Wrappername__ call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final __name__[] data = new __name__[1];
                    h5.readDataSet(dataSetId, __Memorytype__, data);
                    return data[0];
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a <code>__name__</code> array (of rank 1) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @return The data read from the data set.
     */
    public __name__[] read__Name__Array(final String objectPath)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[]> readCallable = new ICallableWithCleanUp<__name__[]>()
            {
                public __name__[] call(ICleanUpRegistry registry)
                {
                    return (__name__[]) primReadArrayRank1(objectPath, __Memorytype__, __name__.class,
                            -1, -1, registry);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a block from a <code>__name__</code> array (of rank 1) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockSize The block size (this will be the length of the <code>__name__[]</code> returned
     *            if the data set is long enough).
     * @param blockNumber The number of the block to read (starting with 0, offset: multiply with
     *            <var>blockSize</var>).
     * @return The data read from the data set. The length will be min(size - blockSize*blockNumber,
     *         blockSize).
     */
    public __name__[] read__Name__ArrayBlock(final String objectPath, final int blockSize,
            final long blockNumber)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[]> readCallable = new ICallableWithCleanUp<__name__[]>()
            {
                public __name__[] call(ICleanUpRegistry registry)
                {
                    return (__name__[]) primReadArrayRank1(objectPath, __Memorytype__, __name__.class,
                            blockSize, blockNumber * blockSize, registry);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a block from <code>__name__</code> array (of rank 1) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockSize The block size (this will be the length of the <code>__name__[]</code>
     *            returned).
     * @param offset The offset of the block in the data set to start reading from (starting with 0).
     * @return The data block read from the data set.
     */
    public __name__[] read__Name__ArrayBlockWithOffset(final String objectPath, final int blockSize,
            final long offset)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[]> readCallable = new ICallableWithCleanUp<__name__[]>()
            {
                public __name__[] call(ICleanUpRegistry registry)
                {
                    return (__name__[]) primReadArrayRank1(objectPath, __Memorytype__, __name__.class,
                            blockSize, offset, registry);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a <code>__name__</code> matrix (array of arrays) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @return The data read from the data set.
     */
    public __name__[][] read__Name__Matrix(final String objectPath)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[][]> readCallable = new ICallableWithCleanUp<__name__[][]>()
            {
                public __name__[][] call(ICleanUpRegistry registry)
                {
                    return (__name__[][]) primReadMatrixRank2(objectPath, __Memorytype__,
                            __name__.class, -1, -1, -1, -1, registry);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a <code>__name__</code> matrix (array of arrays) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockSizeX The size of the block in the x dimension.
     * @param blockSizeY The size of the block in the y dimension.
     * @param blockNumberX The block number in the x dimension (offset: multiply with
     *            <code>blockSizeX</code>).
     * @param blockNumberY The block number in the y dimension (offset: multiply with
     *            <code>blockSizeY</code>).
     * @return The data block read from the data set.
     */
    public __name__[][] read__Name__MatrixBlock(final String objectPath, final int blockSizeX,
            final int blockSizeY, final long blockNumberX, final long blockNumberY)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[][]> readCallable = new ICallableWithCleanUp<__name__[][]>()
            {
                public __name__[][] call(ICleanUpRegistry registry)
                {
                    return (__name__[][]) primReadMatrixRank2(objectPath, __Memorytype__,
                            __name__.class, blockSizeX, blockSizeY, blockNumberX * blockSizeX,
                            blockNumberY * blockSizeY, registry);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a <code>__name__</code> matrix (array of arrays) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockSizeX The size of the block in the x dimension.
     * @param blockSizeY The size of the block in the y dimension.
     * @param offsetX The offset in x dimension in the data set to start reading from.
     * @param offsetY The offset in y dimension in the data set to start reading from.
     * @return The data block read from the data set.
     */
    public __name__[][] read__Name__MatrixBlockWithOffset(final String objectPath, final int blockSizeX,
            final int blockSizeY, final long offsetX, final long offsetY)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[][]> readCallable = new ICallableWithCleanUp<__name__[][]>()
            {
                public __name__[][] call(ICleanUpRegistry registry)
                {
                    return (__name__[][]) primReadMatrixRank2(objectPath, __Memorytype__,
                            __name__.class, blockSizeX, blockSizeY, offsetX, offsetY, registry);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a multi-dimensional <code>__name__</code> array from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @return The data read from the data set.
     */
    public MD__Name__Array read__Name__MDArray(final String objectPath)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<MD__Name__Array> readCallable = new ICallableWithCleanUp<MD__Name__Array>()
            {
                public MD__Name__Array call(ICleanUpRegistry registry)
                {
                    final long[][] dimensionsContainer = new long[1][];
                    final __name__[] data =
                            (__name__[]) primReadArrayRankN(objectPath, __Memorytype__, __name__.class,
                                    null, null, dimensionsContainer, registry);
                    return new MD__Name__Array(data, dimensionsContainer[0]);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a multi-dimensional <code>__name__</code> array from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockDimensions The extent of the block in each dimension.
     * @param blockNumber The block number in each dimension (offset: multiply with the
     *            <var>blockDimensions</var> in the according dimension).
     * @return The data block read from the data set.
     */
    public MD__Name__Array read__Name__MDArrayBlock(final String objectPath, final int[] blockDimensions,
            final long[] blockNumber)
    {
        assert objectPath != null;
        assert blockDimensions != null;
        assert blockNumber != null;

        checkOpen();
        final ICallableWithCleanUp<MD__Name__Array> readCallable = new ICallableWithCleanUp<MD__Name__Array>()
            {
                public MD__Name__Array call(ICleanUpRegistry registry)
                {
                    final long[] offset = new long[blockDimensions.length];
                    for (int i = 0; i < offset.length; ++i)
                    {
                        offset[i] = blockNumber[i] * blockDimensions[i];
                    }
                    final __name__[] dataBlock =
                            (__name__[]) primReadArrayRankN(objectPath, __Memorytype__, __name__.class,
                                    blockDimensions, offset, null, registry);
                    return new MD__Name__Array(dataBlock, blockDimensions);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a multi-dimensional <code>__name__</code> array from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockDimensions The extent of the block in each dimension.
     * @param offset The offset in the data set to start reading from in each dimension.
     * @return The data block read from the data set.
     */
    public MD__Name__Array read__Name__MDArrayBlockWithOffset(final String objectPath,
            final int[] blockDimensions, final long[] offset)
    {
        assert objectPath != null;
        assert blockDimensions != null;
        assert offset != null;

        checkOpen();
        final ICallableWithCleanUp<MD__Name__Array> readCallable = new ICallableWithCleanUp<MD__Name__Array>()
            {
                public MD__Name__Array call(ICleanUpRegistry registry)
                {
                    final __name__[] dataBlock =
                            (__name__[]) primReadArrayRankN(objectPath, __Memorytype__, __name__.class,
                                    blockDimensions, offset, null, registry);
                    return new MD__Name__Array(dataBlock, blockDimensions);
                }
            };
        return runner.call(readCallable);
    }
