    //
    // __Name__
    //

    /**
     * Reads a <code>__name__</code> value from the data set <var>objectPath</var>. This method doesn't
     * check the data space but simply reads the first value.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @return The value read from the data set.
     */
    public __name__ read__Name__(final String objectPath)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__Wrappername__> readCallable = new ICallableWithCleanUp<__Wrappername__>()
            {
                public __Wrappername__ call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final __name__[] data = new __name__[1];
                    h5.readDataSet(dataSetId, __Memorytype__, data);
                    return data[0];
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a <code>__name__</code> array (of rank 1) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @return The data read from the data set.
     */
    public __name__[] read__Name__Array(final String objectPath)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[]> readCallable = new ICallableWithCleanUp<__name__[]>()
            {
                public __name__[] call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final DataSpaceParameters spaceParams = getSpaceParameters(dataSetId, registry);
                    final __name__[] data = new __name__[spaceParams.blockSize];
                    h5.readDataSet(dataSetId, __Memorytype__, spaceParams.memorySpaceId,
                            spaceParams.dataSpaceId, data);
                    return data;
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a multi-dimensional <code>__name__</code> array data set <var>objectPath</var>
     * into a given <var>array</var> in memory.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param array The array to read the data into.
     * @param memoryOffset The offset in the array to write the data to.
     */
    public void readTo__Name__MDArrayWithOffset(final String objectPath, final MD__Name__Array array,
            final int[] memoryOffset)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<Void> readCallable = new ICallableWithCleanUp<Void>()
            {
                public Void call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final DataSpaceParameters spaceParams =
                            getBlockSpaceParameters(dataSetId, memoryOffset, array.dimensions(),
                                    registry);
                    final int nativeDataTypeId =
                            getNativeDataTypeId(dataSetId, __Memorytype__, registry);
                    h5.readDataSet(dataSetId, nativeDataTypeId, spaceParams.memorySpaceId,
                            spaceParams.dataSpaceId, array.getAsFlatArray());
                    return null; // Nothing to return.
                }
            };
        runner.call(readCallable);
    }

    /**
     * Reads a block of the multi-dimensional <code>__name__</code> array data set
     * <var>objectPath</var> into a given <var>array</var> in memory.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param array The array to read the data into.
     * @param blockDimensions The size of the block to read along each axis.
     * @param offset The offset of the block in the data set.
     * @param memoryOffset The offset of the block in the array to write the data to.
     */
    public void readTo__Name__MDArrayBlockWithOffset(final String objectPath,
            final MD__Name__Array array, final int[] blockDimensions, final long[] offset,
            final int[] memoryOffset)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<Void> readCallable = new ICallableWithCleanUp<Void>()
            {
                public Void call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final DataSpaceParameters spaceParams =
                            getBlockSpaceParameters(dataSetId, memoryOffset, array.dimensions(),
                                    offset, blockDimensions, registry);
                    final int nativeDataTypeId =
                            getNativeDataTypeId(dataSetId, __Memorytype__, registry);
                    h5.readDataSet(dataSetId, nativeDataTypeId, spaceParams.memorySpaceId,
                            spaceParams.dataSpaceId, array.getAsFlatArray());
                    return null; // Nothing to return.
                }
            };
        runner.call(readCallable);
    }

    /**
     * Reads a block from a <code>__name__</code> array (of rank 1) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockSize The block size (this will be the length of the <code>__name__[]</code> returned
     *            if the data set is long enough).
     * @param blockNumber The number of the block to read (starting with 0, offset: multiply with
     *            <var>blockSize</var>).
     * @return The data read from the data set. The length will be min(size - blockSize*blockNumber,
     *         blockSize).
     */
    public __name__[] read__Name__ArrayBlock(final String objectPath, final int blockSize,
            final long blockNumber)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[]> readCallable = new ICallableWithCleanUp<__name__[]>()
            {
                public __name__[] call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final DataSpaceParameters spaceParams =
                            getSpaceParameters(dataSetId, blockNumber * blockSize, blockSize,
                                    registry);
                    final __name__[] data = new __name__[spaceParams.blockSize];
                    h5.readDataSet(dataSetId, __Memorytype__, spaceParams.memorySpaceId,
                            spaceParams.dataSpaceId, data);
                    return data;
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a block from <code>__name__</code> array (of rank 1) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockSize The block size (this will be the length of the <code>__name__[]</code>
     *            returned).
     * @param offset The offset of the block in the data set to start reading from (starting with 0).
     * @return The data block read from the data set.
     */
    public __name__[] read__Name__ArrayBlockWithOffset(final String objectPath, final int blockSize,
            final long offset)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<__name__[]> readCallable = new ICallableWithCleanUp<__name__[]>()
            {
                public __name__[] call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final DataSpaceParameters spaceParams =
                            getSpaceParameters(dataSetId, offset, blockSize, registry);
                    final __name__[] data = new __name__[spaceParams.blockSize];
                    h5.readDataSet(dataSetId, __Memorytype__, spaceParams.memorySpaceId,
                            spaceParams.dataSpaceId, data);
                    return data;
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a <code>__name__</code> matrix (array of arrays) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @return The data read from the data set.
     *
     * @throws HDF5JavaException If the data set <var>objectPath</var> is not of rank 2.
     */
    public __name__[][] read__Name__Matrix(final String objectPath) throws HDF5JavaException
    {
        final MD__Name__Array array = read__Name__MDArray(objectPath);
        if (array.rank() != 2)
        {
            throw new HDF5JavaException("Array is supposed to be of rank 2, but is of rank "
                    + array.rank());
        }
        return array.toMatrix();
    }

    /**
     * Reads a <code>__name__</code> matrix (array of arrays) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockSizeX The size of the block in the x dimension.
     * @param blockSizeY The size of the block in the y dimension.
     * @param blockNumberX The block number in the x dimension (offset: multiply with
     *            <code>blockSizeX</code>).
     * @param blockNumberY The block number in the y dimension (offset: multiply with
     *            <code>blockSizeY</code>).
     * @return The data block read from the data set.
     *
     * @throws HDF5JavaException If the data set <var>objectPath</var> is not of rank 2.
     */
    public __name__[][] read__Name__MatrixBlock(final String objectPath, final int blockSizeX,
            final int blockSizeY, final long blockNumberX, final long blockNumberY) 
            throws HDF5JavaException
    {
        final MD__Name__Array array = read__Name__MDArrayBlock(objectPath, new int[]
            { blockSizeX, blockSizeY }, new long[]
            { blockNumberX, blockNumberY });
        if (array.rank() != 2)
        {
            throw new HDF5JavaException("Array is supposed to be of rank 2, but is of rank "
                    + array.rank());
        }
        return array.toMatrix();
    }

    /**
     * Reads a <code>__name__</code> matrix (array of arrays) from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockSizeX The size of the block in the x dimension.
     * @param blockSizeY The size of the block in the y dimension.
     * @param offsetX The offset in x dimension in the data set to start reading from.
     * @param offsetY The offset in y dimension in the data set to start reading from.
     * @return The data block read from the data set.
     *
     * @throws HDF5JavaException If the data set <var>objectPath</var> is not of rank 2.
     */
    public __name__[][] read__Name__MatrixBlockWithOffset(final String objectPath, final int blockSizeX,
            final int blockSizeY, final long offsetX, final long offsetY) throws HDF5JavaException
    {
        final MD__Name__Array array = read__Name__MDArrayBlockWithOffset(objectPath, new int[]
            { blockSizeX, blockSizeY }, new long[]
            { offsetX, offsetY });
        if (array.rank() != 2)
        {
            throw new HDF5JavaException("Array is supposed to be of rank 2, but is of rank "
                    + array.rank());
        }
        return array.toMatrix();
    }

    /**
     * Reads a multi-dimensional <code>__name__</code> array from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @return The data read from the data set.
     */
    public MD__Name__Array read__Name__MDArray(final String objectPath)
    {
        assert objectPath != null;

        checkOpen();
        final ICallableWithCleanUp<MD__Name__Array> readCallable = new ICallableWithCleanUp<MD__Name__Array>()
            {
                public MD__Name__Array call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final DataSpaceParameters spaceParams =
                            getSpaceParameters(dataSetId, registry);
                    final int nativeDataTypeId =
                            getNativeDataTypeId(dataSetId, __Memorytype__, registry);
                    final __name__[] data = new __name__[spaceParams.blockSize];
                    h5.readDataSet(dataSetId, nativeDataTypeId, spaceParams.memorySpaceId,
                            spaceParams.dataSpaceId, data);
                    return new MD__Name__Array(data, spaceParams.dimensions);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a multi-dimensional <code>__name__</code> array from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockDimensions The extent of the block in each dimension.
     * @param blockNumber The block number in each dimension (offset: multiply with the
     *            <var>blockDimensions</var> in the according dimension).
     * @return The data block read from the data set.
     */
    public MD__Name__Array read__Name__MDArrayBlock(final String objectPath, final int[] blockDimensions,
            final long[] blockNumber)
    {
        assert objectPath != null;
        assert blockDimensions != null;
        assert blockNumber != null;

        checkOpen();
        final ICallableWithCleanUp<MD__Name__Array> readCallable = new ICallableWithCleanUp<MD__Name__Array>()
            {
                public MD__Name__Array call(ICleanUpRegistry registry)
                {
                    final long[] offset = new long[blockDimensions.length];
                    for (int i = 0; i < offset.length; ++i)
                    {
                        offset[i] = blockNumber[i] * blockDimensions[i];
                    }
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final DataSpaceParameters spaceParams =
                            getSpaceParameters(dataSetId, offset, blockDimensions, registry);
                    final __name__[] dataBlock = new __name__[spaceParams.blockSize];
                    h5.readDataSet(dataSetId, __Memorytype__, spaceParams.memorySpaceId,
                            spaceParams.dataSpaceId, dataBlock);
                    return new MD__Name__Array(dataBlock, blockDimensions);
                }
            };
        return runner.call(readCallable);
    }

    /**
     * Reads a multi-dimensional <code>__name__</code> array from the data set <var>objectPath</var>.
     * 
     * @param objectPath The name (including path information) of the data set object in the file.
     * @param blockDimensions The extent of the block in each dimension.
     * @param offset The offset in the data set to start reading from in each dimension.
     * @return The data block read from the data set.
     */
    public MD__Name__Array read__Name__MDArrayBlockWithOffset(final String objectPath,
            final int[] blockDimensions, final long[] offset)
    {
        assert objectPath != null;
        assert blockDimensions != null;
        assert offset != null;

        checkOpen();
        final ICallableWithCleanUp<MD__Name__Array> readCallable = new ICallableWithCleanUp<MD__Name__Array>()
            {
                public MD__Name__Array call(ICleanUpRegistry registry)
                {
                    final int dataSetId = h5.openDataSet(fileId, objectPath, registry);
                    final DataSpaceParameters spaceParams =
                            getSpaceParameters(dataSetId, offset, blockDimensions, registry);
                    final __name__[] dataBlock = new __name__[spaceParams.blockSize];
                    h5.readDataSet(dataSetId, __Memorytype__, spaceParams.memorySpaceId,
                            spaceParams.dataSpaceId, dataBlock);
                    return new MD__Name__Array(dataBlock, blockDimensions);
                }
            };
        return runner.call(readCallable);
    }
    
    /**
     * Provides all natural blocks of this one-dimensional data set to iterate over.
     * 
     * @see HDF5DataBlock
     * @throws HDF5JavaException If the data set is not of rank 1.
     */
    public Iterable<HDF5DataBlock<__name__[]>> get__Name__ArrayNaturalBlocks(final String dataSetPath)
            throws HDF5JavaException
    {
        final HDF5DataSetInformation info = getDataSetInformation(dataSetPath);
        if (info.getRank() > 1)
        {
            throw new HDF5JavaException("Data Set is expected to be of rank 1 (rank="
                    + info.getRank() + ")");
        }
        final long longSize = info.getDimensions()[0];
        final int size = (int) longSize;
        if (size != longSize)
        {
            throw new HDF5JavaException("Data Set is too large (" + longSize + ")");
        }
        final int naturalBlockSize =
                (info.getStorageLayout() == StorageLayout.CHUNKED) ? info.tryGetChunkSizes()[0]
                        : size;
        final int sizeModNaturalBlockSize = size % naturalBlockSize;
        final long numberOfBlocks =
                (size / naturalBlockSize) + (sizeModNaturalBlockSize != 0 ? 1 : 0);
        final int lastBlockSize =
                (sizeModNaturalBlockSize != 0) ? sizeModNaturalBlockSize : naturalBlockSize;

        return new Iterable<HDF5DataBlock<__name__[]>>()
            {
                public Iterator<HDF5DataBlock<__name__[]>> iterator()
                {
                    return new Iterator<HDF5DataBlock<__name__[]>>()
                        {
                            long index = 0;

                            public boolean hasNext()
                            {
                                return index < numberOfBlocks;
                            }

                            public HDF5DataBlock<__name__[]> next()
                            {
                                if (hasNext() == false)
                                {
                                    throw new NoSuchElementException();
                                }
                                final long offset = naturalBlockSize * index;
                                final int blockSize =
                                        (index == numberOfBlocks - 1) ? lastBlockSize
                                                : naturalBlockSize;
                                final __name__[] block =
                                        read__Name__ArrayBlockWithOffset(dataSetPath, blockSize,
                                                offset);
                                return new HDF5DataBlock<__name__[]>(block, index++, offset);
                            }

                            public void remove()
                            {
                                throw new UnsupportedOperationException();
                            }
                        };
                }
            };
    }

    /**
     * Provides all natural blocks of this multi-dimensional data set to iterate over.
     * 
     * @see HDF5MDDataBlock
     */
    public Iterable<HDF5MDDataBlock<MD__Name__Array>> get__Name__MDArrayNaturalBlocks(final String dataSetPath)
    {
        final HDF5DataSetInformation info = getDataSetInformation(dataSetPath);
        final int rank = info.getRank();
        final int[] size = MDArray.toInt(info.getDimensions());
        final int[] naturalBlockSize =
                (info.getStorageLayout() == StorageLayout.CHUNKED) ? info.tryGetChunkSizes() : size;
        final long[] numberOfBlocks = new long[rank];
        final int[] lastBlockSize = new int[rank];
        for (int i = 0; i < size.length; ++i)
        {
            final int sizeModNaturalBlockSize = size[i] % naturalBlockSize[i];
            numberOfBlocks[i] =
                    (size[i] / naturalBlockSize[i]) + (sizeModNaturalBlockSize != 0 ? 1 : 0);
            lastBlockSize[i] =
                    (sizeModNaturalBlockSize != 0) ? sizeModNaturalBlockSize : naturalBlockSize[i];
        }

        return new Iterable<HDF5MDDataBlock<MD__Name__Array>>()
            {
                public Iterator<HDF5MDDataBlock<MD__Name__Array>> iterator()
                {
                    return new Iterator<HDF5MDDataBlock<MD__Name__Array>>()
                        {
                            long[] index = new long[rank];

                            long[] offset = new long[rank];

                            int[] blockSize = naturalBlockSize.clone();

                            boolean indexCalculated = true;

                            public boolean hasNext()
                            {
                                if (indexCalculated)
                                {
                                    return true;
                                }
                                for (int i = index.length - 1; i >= 0; --i)
                                {
                                    ++index[i];
                                    if (index[i] < numberOfBlocks[i])
                                    {
                                        offset[i] += naturalBlockSize[i];
                                        if (index[i] == numberOfBlocks[i] - 1)
                                        {
                                            blockSize[i] = lastBlockSize[i];
                                        }
                                        indexCalculated = true;
                                        break;
                                    } else
                                    {
                                        index[i] = 0;
                                        offset[i] = 0;
                                        blockSize[i] = naturalBlockSize[i];
                                    }
                                }
                                return indexCalculated;
                            }

                            public HDF5MDDataBlock<MD__Name__Array> next()
                            {
                                if (hasNext() == false)
                                {
                                    throw new NoSuchElementException();
                                }
                                final MD__Name__Array data =
                                        read__Name__MDArrayBlockWithOffset(dataSetPath, blockSize,
                                                offset);
                                prepareNext();
                                return new HDF5MDDataBlock<MD__Name__Array>(data, index.clone(),
                                        offset.clone());
                            }

                            public void remove()
                            {
                                throw new UnsupportedOperationException();
                            }

                            private void prepareNext()
                            {
                                indexCalculated = false;
                            }
                        };
                }
            };
    }

